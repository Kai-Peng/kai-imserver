<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="im.kai.server.service.user.mapper.OfflineMessageMapper">
  <resultMap id="BaseResultMap" type="im.kai.server.service.user.domain.dto.OfflineMessage">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="seq" jdbcType="BIGINT" property="seq" />
    <result column="from_user_id" jdbcType="BIGINT" property="fromUserId" />
    <result column="from_device_id" jdbcType="BIGINT" property="fromDeviceId" />
    <result column="from_room_id" jdbcType="BIGINT" property="fromRoomId" />
    <result column="created" jdbcType="BIGINT" property="created" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="content" jdbcType="VARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, seq, from_user_id, from_device_id, from_room_id, created, type, content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from im_offline_message
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from im_offline_message
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="im.kai.server.service.user.domain.dto.OfflineMessage">
    insert into im_offline_message (id, user_id, seq, 
      from_user_id, from_device_id, from_room_id, 
      created, type, content
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{seq,jdbcType=BIGINT}, 
      #{fromUserId,jdbcType=BIGINT}, #{fromDeviceId,jdbcType=BIGINT}, #{fromRoomId,jdbcType=BIGINT}, 
      #{created,jdbcType=TIMESTAMP}, #{type,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="im.kai.server.service.user.domain.dto.OfflineMessage">
    insert into im_offline_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="seq != null">
        seq,
      </if>
      <if test="fromUserId != null">
        from_user_id,
      </if>
      <if test="fromDeviceId != null">
        from_device_id,
      </if>
      <if test="fromRoomId != null">
        from_room_id,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="seq != null">
        #{seq,jdbcType=BIGINT},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=BIGINT},
      </if>
      <if test="fromDeviceId != null">
        #{fromDeviceId,jdbcType=BIGINT},
      </if>
      <if test="fromRoomId != null">
        #{fromRoomId,jdbcType=BIGINT},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="im.kai.server.service.user.domain.dto.OfflineMessage">
    update im_offline_message
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="seq != null">
        seq = #{seq,jdbcType=BIGINT},
      </if>
      <if test="fromUserId != null">
        from_user_id = #{fromUserId,jdbcType=BIGINT},
      </if>
      <if test="fromDeviceId != null">
        from_device_id = #{fromDeviceId,jdbcType=BIGINT},
      </if>
      <if test="fromRoomId != null">
        from_room_id = #{fromRoomId,jdbcType=BIGINT},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="im.kai.server.service.user.domain.dto.OfflineMessage">
    update im_offline_message
    set user_id = #{userId,jdbcType=BIGINT},
      seq = #{seq,jdbcType=BIGINT},
      from_user_id = #{fromUserId,jdbcType=BIGINT},
      from_device_id = #{fromDeviceId,jdbcType=BIGINT},
      from_room_id = #{fromRoomId,jdbcType=BIGINT},
      created = #{created,jdbcType=TIMESTAMP},
      type = #{type,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>